{"version":3,"sources":["components/SearchPanel/SearchPanel.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SearchPanel","random","seachingValue","selectValue","randomize","className","type","name","placeholder","onChange","event","value","title","classNames","onClick","TodoList","todos","selectedUserId","selectUserId","length","map","todo","completed","checked","readOnly","userId","id","API_URL","CurrentUser","clear","useState","user","setUser","loadUser","a","url","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","newUser","useEffect","email","phone","App","setSelectedUserId","todoList","setTodoList","query","setQuery","selectedSort","setSelectSort","setRandom","loadTodos","filtredTodos","useMemo","filter","toLowerCase","includes","newTodos","visibleTodos","sort","Math","b","target","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94b46f97.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './Search.scss';\n\ntype Props = {\n  random: boolean,\n  seachingValue: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  selectValue: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  randomize: () => void,\n};\n\nexport const SearchPanel: React.FC<Props> = ({\n  random,\n  seachingValue,\n  selectValue,\n  randomize,\n}) => {\n  return (\n    <>\n      <h2>Todos:</h2>\n\n      <div className=\"Search-panel__form\">\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"Search-panel__form__search\"\n          placeholder=\"Type search todo\"\n          onChange={(event) => seachingValue(event)}\n        />\n\n        <select\n          className=\"Search-panel__form__select\"\n          onChange={(event) => selectValue(event)}\n        >\n          <option\n            value=\"\"\n            className=\"Search-panel__form__select__option\"\n          >\n            Choose filter\n          </option>\n          <option value=\"all\">All ToDos</option>\n          <option value=\"completed\">Completed Todos</option>\n          <option value=\"not-complete\">Active ToDos</option>\n        </select>\n\n        <button\n          type=\"button\"\n          title=\"Random todos sort\"\n          className={classNames(\n            'Search-panel__form__button',\n            { 'Search-panel__form__button--on': random },\n          )}\n          onClick={randomize}\n        >\n          {random ? 'Randomize On' : 'Randomize Off'}\n        </button>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  selectUserId: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectUserId,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      {todos.length > 0 ? (\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"error-message\">\n          <p>No todos was found</p>\n        </div>\n      )}\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getAllTodos(url: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport function getUser(url: string): Promise<User> {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  clear,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  const loadUser = async () => {\n    const newUser = await getUser(`/users/${userId}`);\n\n    setUser(newUser);\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <div className=\"CurrentUser__clear\">\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear-button\"\n              onClick={clear}\n            >\n              Clear\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { SearchPanel } from './components/SearchPanel/SearchPanel';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedSort, setSelectSort] = useState('');\n  const [random, setRandom] = useState(false);\n\n  const loadTodos = async () => {\n    const todos = await getAllTodos('/todos');\n\n    setTodoList(todos);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const changeUserId = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const clearUserId = () => {\n    setSelectedUserId(0);\n  };\n\n  const seachingValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value.toLowerCase());\n  };\n\n  const selectSort = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectSort(event.target.value);\n  };\n\n  const randomValue = () => {\n    setRandom((prevState => {\n      return !prevState;\n    }));\n  };\n\n  const getVisibleTodos = () => {\n    let todos = todoList.filter(todo => todo.title\n      .toLowerCase().includes(query));\n\n    let newTodos = todos;\n\n    if (selectedSort !== '' && selectedSort !== 'all') {\n      switch (selectedSort) {\n        case 'all':\n        case '':\n          newTodos = todoList.filter(todo => todo.title\n            .toLowerCase().includes(query));\n          break;\n        case 'completed':\n          newTodos = todos.filter(todo => todo.completed);\n          break;\n        case 'not-complete':\n          newTodos = todos.filter(todo => !todo.completed);\n          break;\n        default:\n          break;\n      }\n    }\n\n    todos = newTodos;\n\n    return todos;\n  };\n\n  const filtredTodos = useMemo(\n    getVisibleTodos,\n    [todoList, query, selectedSort],\n  );\n\n  const preparedTodos = () => {\n    if (!random) {\n      return filtredTodos;\n    }\n\n    const shuffled = filtredTodos\n      .map(value => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value);\n\n    return shuffled;\n  };\n\n  const visibleTodos = useMemo(\n    preparedTodos,\n    [random, filtredTodos],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <SearchPanel\n          random={random}\n          seachingValue={seachingValue}\n          selectValue={selectSort}\n          randomize={randomValue}\n        />\n        <TodoList\n          todos={visibleTodos}\n          selectedUserId={selectedUserId}\n          selectUserId={changeUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clear={clearUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}